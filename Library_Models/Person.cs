using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

namespace Library_Models
{
    /// <summary>
    ///     Class <c>Person</c> models the library's clients.
    /// </summary>
    /// <remarks>
    ///     The class is created to store these data with EF Core.
    /// </remarks>
    public class Person
    {
        /// <summary>
        ///     Property <c>Id</c> represents the Person's ID in the library and it's key in the database.
        /// </summary>
        /// <value>
        ///     A long value generated by the EF core after save.
        /// </value>
        [Key]
        public long Id { get; set; }
        /// <summary>
        ///     Property <c>FirstName</c> represents the Person's first name.<br></br>
        ///     The <c>Person</c> class does not support secondary names!!! Please don't use any.<br></br>
        ///     It can be 30 caracters at max.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string representing the person's first name.
        /// </value>
        [Required]
        [MaxLength(30)]
        public string FirstName { get; set; }
        /// <summary>
        ///     Property <c>LastName</c> represents the Person's last name.<br></br>
        ///     It can be 30 caracters at max.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string representing the person's last name.
        /// </value>
        [Required]
        [MaxLength(30)]
        public string LastName { get; set; }
        /// <summary>
        ///     Property <c>DateOfBirth</c> contains the Person's date of birth.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A DateTime representing the person's Date of Birth.
        /// </value>
        [Required]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        ///     Generates the Person's Hash Code.
        /// </summary>
        /// <returns>
        ///     Returns an int Hash Code generated by the Person's Id.
        /// </returns>
        public override int GetHashCode()
        {
            return 2108858624 + Id.GetHashCode();
        }

        /// <summary>
        ///     Reports if this is equals to an another object<br></br>
        /// </summary>
        /// <returns>
        ///     True, if the 2 object are the same, False if not.
        /// </returns>
        public override bool Equals(object obj)
        {
            return obj is Person person &&
                   Id == person.Id &&
                   FirstName == person.FirstName &&
                   LastName == person.LastName &&
                   DateOfBirth == person.DateOfBirth;
        }

        /// <summary>
        ///     Reports the Person's data as a string.<br></br>
        /// </summary>
        /// <returns>
        ///     Returns the Persons's first and last name, with the date of birth in the following form:<br></br>
        ///     <c>LastName FirstName(DateOfBirth)</c><br></br>
        ///     <example>
        ///         For example: Vágner Máté(1999-06-24)<br></br>
        ///     </example>
        /// </returns>
        public override string ToString()
        {
            return $"{LastName} {FirstName}({DateOfBirth.Date})";
        }

        /// <summary>
        ///     Determines if a Person's name is a valid name or not.
        /// </summary>
        /// <returns>
        ///     Retruns true if the name is valid, false othervise.
        /// </returns>
        public bool IsNameValid()
        {
            var simpleName = new Regex("^[A-Z][a-z]*$");
            if (simpleName.Match(FirstName).Success && simpleName.Match(LastName).Success)
            {
                return true;
            }
            return false;
        }
    }
}
