using System;
using System.ComponentModel.DataAnnotations;

namespace Library_Models
{
    /// <summary>
    /// Class <c>ArchiveData</c> models a book's borrowing history.
    /// It contain's the book's adn the borrowing person's data with their IDs.
    /// </summary>
    /// <remarks>
    /// The class is created to archive these data with EF Core.
    /// </remarks>
    public class ArchiveData
    {
        /// <summary>
        ///     Property <c>Id</c> represents the Archive Data's ID and it's key in the database.
        /// </summary>
        /// <value>
        ///     A long value generated by the EF core after save.
        /// </value>
        [Key]
        public long Id { get; set; }
        /// <summary>
        ///     Property <c>BorrowedAt</c> contains the date of borrowing.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A DateTime value representing the Date of Borrow.
        /// </value>
        [Required]
        public DateTime? BorrowedAt { get; set; }
        /// <summary>
        ///     Property <c>ReturnedAt</c> contains the date of return.
        /// </summary>
        /// <value>
        ///     A DateTime value representing the Date of Return. Or null if it's not returned yet.
        /// </value>
        public DateTime? ReturnedAt { get; set; }
        /// <summary>
        ///     Property <c>BookId</c> contains the borrowed Book's ID.<br></br>
        ///     It stored to support a connection with the current database.<br></br>
        ///     Can be null after a deletion.
        /// </summary>
        /// <value>
        ///     A long value representing the Book's ID. Or null if it no longer exists in the DB.
        /// </value>
        public long? BookId { get; set; }
        /// <summary>
        ///     Property <c>Code</c> represents the borrowed Book's ISBN or other type of identifier code.<br></br>
        ///     Stored for backward database compatibility.<br></br>
        ///     It can be 20 caracters at max.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string value representing the book's ISBN or other type of ID.
        /// </value>
        [Required]
        [MaxLength(20)]
        public string Code { get; set; }
        /// <summary>
        ///     Property <c>Auther</c> represents the borrowed Book's Author.<br></br>
        ///     Stored for backward database compatibility.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string value representing the book's author.
        /// </value>
        [Required]
        public string Author { get; set; }
        /// <summary>
        ///     Property <c>Title</c> represents the borrowed Book's Title.<br></br>
        ///     Stored for backward database compatibility.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string value representing the book's title.
        /// </value>
        [Required]
        public string Title { get; set; }
        /// <summary>
        ///     Property <c>BorrowerId</c> contains the borrower Person's ID.<br></br>
        ///     It stored to support a connection with the current database.<br></br>
        ///     Can be null after a deletion.
        /// </summary>
        /// <value>
        ///     A long value representing the Borrower's ID. Or null if it no longer exists in the DB.
        /// </value>
        public long? BorrowerId { get; set; }
        /// <summary>
        ///     Property <c>FirstName</c> represents the borrower Person's first name.<br></br>
        ///     It can be 30 caracters at max.<br></br>
        ///     Stored for backward compatibility.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string representing the person's first name.
        /// </value>
        [Required]
        [MaxLength(30)]
        public string FirstName { get; set; }
        /// <summary>
        ///     Property <c>LastName</c> represents the borrower Person's last name.<br></br>
        ///     It can be 30 caracters at max.<br></br>
        ///     Stored for backward compatibility.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A string representing the person's last name.
        /// </value>
        [Required]
        [MaxLength(30)]
        public string LastName { get; set; }
        /// <summary>
        ///     Property <c>DateOfBirth</c> contains the borrower Person's date of birth.<br></br>
        ///     Stored for backward compatibility.<br></br>
        ///     It is required in every modell.
        /// </summary>
        /// <value>
        ///     A DateTime representing the person's Date of Birth.
        /// </value>
        [Required]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        ///     Generates the Archived Data's Hash Code.
        /// </summary>
        /// <returns>
        ///     An int Hash Code generated by the Archived Data's Id.
        /// </returns>
        public override int GetHashCode()
        {
            return 2108858624 + Id.GetHashCode();
        }

        /// <summary>
        ///     Reports if this is equals to an another object
        /// </summary>
        /// <returns>
        ///     True, if the 2 object are the same, False if not.
        /// </returns>
        public override bool Equals(object obj)
        {
            return obj is ArchiveData data &&
                   Id == data.Id &&
                   BorrowedAt == data.BorrowedAt &&
                   ReturnedAt == data.ReturnedAt &&
                   Code == data.Code &&
                   Author == data.Author &&
                   Title == data.Title &&
                   FirstName == data.FirstName &&
                   LastName == data.LastName &&
                   DateOfBirth == data.DateOfBirth;
        }

        /// <summary>
        ///     Reports the Person's data as a string.
        /// </summary>
        /// <returns>
        ///     Theborrowed book's author, title and code AND the borrower Persons's first and last name, with the date of birth with the borrowing DateTime data in the following form:
        ///     <c>LastName FirstName(DateOfBirth)</c>
        ///     <example>
        ///         For exaple: Jack Whyte: The Skystone(978-963-426-205-3) - Vágner Máté(1999-06-24) -  Kölcsönözve:(2020.01.10. 17:04:32) Visszahozva:(2020.01.19. 17:00:02)
        ///     </example>
        /// </returns>
        public override string ToString()
        {
            return $"{Author}: {Title}({Code}) - {LastName} {FirstName}({DateOfBirth.Date}) - Kölcsönözve:({BorrowedAt}) Visszahozva:({ReturnedAt})";
        }
    }
}
